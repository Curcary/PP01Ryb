//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace The_Testo.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class The_TestoEntities : DbContext
    {
        public The_TestoEntities()
            : base("name=The_TestoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Compound> Compound { get; set; }
        public virtual DbSet<Dish> Dish { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Ordered_dishes> Ordered_dishes { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<TechnologyCard> TechnologyCard { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Dishes> Dishes { get; set; }
        public virtual DbSet<TodaysOrderedDishes> TodaysOrderedDishes { get; set; }
    
        public virtual int AddNewDish(Nullable<int> caregory, string dishName, Nullable<decimal> dishPrice, byte[] dishImage)
        {
            var caregoryParameter = caregory.HasValue ?
                new ObjectParameter("Caregory", caregory) :
                new ObjectParameter("Caregory", typeof(int));
    
            var dishNameParameter = dishName != null ?
                new ObjectParameter("DishName", dishName) :
                new ObjectParameter("DishName", typeof(string));
    
            var dishPriceParameter = dishPrice.HasValue ?
                new ObjectParameter("DishPrice", dishPrice) :
                new ObjectParameter("DishPrice", typeof(decimal));
    
            var dishImageParameter = dishImage != null ?
                new ObjectParameter("DishImage", dishImage) :
                new ObjectParameter("DishImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewDish", caregoryParameter, dishNameParameter, dishPriceParameter, dishImageParameter);
        }
    
        public virtual int DaySummary(Nullable<System.DateTime> date, ObjectParameter outMoney)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DaySummary", dateParameter, outMoney);
        }
    
        public virtual int OrderSum(Nullable<int> orderID, ObjectParameter outSum)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderSum", orderIDParameter, outSum);
        }
    }
}
